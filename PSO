%% Tunning of PID controller using Particle Swarm Optimization 
%
%
% 
%
%% Initialization

format long

n = 20;                      %Size of the swarm " no of birds"
bird_setp=30;                % Maximum number of "birds steps"
dim = 5;                     % Dimension of the problem
c1 = 1.2;                    % PSO parameter C1 default=0.1
c2 =0.9;                     % PSO parameter C2 default=1.2        
w =0.6;                      % pso momentum or inertia  
fitness=0*ones(n,bird_setp); 


                                       %-----------------------------%
                                       %    initialize the parameter %
                                       %-----------------------------%
                                       
R1 = rand(dim, n);
R2 = rand(dim, n);
current_fitness =0*ones(n,1);

                                 %------------------------------------------------%
                                 % Initializing swarm and velocities and position %
                                 %------------------------------------------------%
                               %Default
                               
% current_position(1,:) = 1*(rand(1, n));
% current_position(2,:) = 10*(rand(1, n));
% current_position(3,:) = 10000*(rand(1, n));
% current_position(4,:) = 100*(rand(1, n));
% current_position(5,:) = 100000*(rand(1, n));
% velocity = .1*randn(dim, n);
                                 
current_position(1,:) = randi([1 400000],1,n);
current_position(2,:) = randi([1 400000],1,n);
current_position(3,:) = randi([1 400000],1,n);
current_position(4,:) = randi([1 400000],1,n);
current_position(5,:) = randi([1 400000],1,n);
velocity = .1*randn(dim, n) ;
local_best_position  = current_position;


                                 %-------------------------------------------%
                                 %     Evaluate initial population           %           
                                 %-------------------------------------------%

for i = 1:n
    current_fitness(i) = tracklsq(current_position(:,i));    
end


local_best_fitness  = current_fitness ;
[global_best_fitness,g] = min(local_best_fitness) ;

for i=1:n
    globl_best_position(:,i) = local_best_position(:,g) ;
end
                                               %-------------------%
                                               %  VELOCITY UPDATE  %
                                               %-------------------%

velocity = w *velocity + c1*(R1.*(local_best_position-current_position)) + c2*(R2.*(globl_best_position-current_position));

                                               %------------------%
                                               %   SWARMUPDATE    %
                                               %------------------%
                                               
            
current_position = current_position + velocity ;

                                               %------------------------%
                                               %  evaluate anew swarm   %
                                               %------------------------%
                                               

%% Main Loop
iter = 0 ;        % Iterationsâ€™counter
while  ( iter < bird_setp )
iter = iter + 1;

for i = 1:n,
current_fitness(i) = tracklsq(current_position(:,i)) ;    
end


for i = 1 : n
        if current_fitness(i) < local_best_fitness(i)
           local_best_fitness(i)  = current_fitness(i);  
           local_best_position(:,i) = current_position(:,i)   ;
        end   
 end

  
 [current_global_best_fitness,g] = min(local_best_fitness);
  
    
if current_global_best_fitness < global_best_fitness
   global_best_fitness = current_global_best_fitness;
   
    for i=1:n
        globl_best_position(:,i) = local_best_position(:,g);
    end
   
end
[iter global_best_fitness]


 velocity = w *velocity + c1*(R1.*(local_best_position-current_position)) + c2*(R2.*(globl_best_position-current_position));
 current_position = current_position + velocity; 
  
 sprintf('The value of interation iter %3.0f ', iter );
 hold on 
 plot(iter,global_best_fitness,'r*')


end % end of while loop its mean the end of all step that the birds move it 
                      

%             xx=fitness(:,10);
%             [Y,I] = min(xx);
%             current_position(:,I)

     globl_best_position(:,1)          
